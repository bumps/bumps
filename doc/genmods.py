from __future__ import with_statement
import os.path
import inspect
import sys

from distutils.util import get_platform
platform = '.%s-%s'%(get_platform(),sys.version[:3])
build_lib = os.path.abspath('../build/lib'+platform)
sys.path.insert(0, build_lib)

MODULE_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

******************************************************************************
%(prefix)s%(module)s - %(title)s
******************************************************************************

.. currentmodule:: %(package)s.%(module)s

.. autosummary::
   :nosignatures:

   %(members)s

.. automodule:: %(package)s.%(module)s
   :members:
   :undoc-members:
   :inherited-members:
   :show-inheritance:

"""

INDEX_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

.. _api-index:

##############################################################################
Reference
##############################################################################

.. only:: html

   :Release: |version|
   :Date: |today|

.. toctree::
   :hidden:

   %(rsts)s

.. currentmodule:: %(package)s

.. autosummary::

   %(mods)s

"""

def getmembers(package, module):
    name = package+"."+module
    __import__(name)
    M = sys.modules[name]
    try:
        L = M.__all__
    except:
        L = [s for s in dir(M)
             if inspect.getmodule(getattr(M,s)) == M and not s.startswith('_')]
    return L

def genfiles(package, modules, dir='api', absolute=True):

    prefix = package+"." if absolute else ""
    if not os.path.exists(dir):
        os.makedirs(dir)
    for (module, title) in modules:
        members = "\n    ".join(getmembers(package, module))
        with open(os.path.join(dir,module+'.rst'), 'w') as f:
            f.write(MODULE_TEMPLATE%locals())
    rsts = "\n   ".join(module+'.rst' for module,_ in modules)
    mods = "\n   ".join(prefix+module for module,_ in modules)

    with open(os.path.join(dir,'index.rst'),'w') as f:
        f.write(INDEX_TEMPLATE%locals())


modules=[
    #('__init__', 'Top level namespace'),
    ('bounds', 'Parameter constraints'),
    ('bspline', 'B-Spline interpolation library'),
    #('_reduction','Low level calculations'),
    ('cheby', 'Freeform - Chebyshev'),
    ('cli', 'Command line interface'),
    ('curve', 'Model a fit function'),
    ('data', 'Data handling utilities'),
    ('errplot','Plot sample profile uncertainty'),
    ('fitproblem', 'Interface between models and fitters'),
    ('fitservice', 'Remote job plugin for fit jobs'),
    ('fitters', 'Wrappers for various optimization algorithms'),
    ('formatnum', 'Format numbers and uncertainties'),
    ('history', 'Optimizer evaluation trace'),
    ('initpop', 'Population initialization strategies'),
    ('lsqerror', 'Least squares eorror analysis'),
    ('mapper', 'Parallel processing implementations'),
    ('monitor', 'Monitor fit progress'),
    ('mono', 'Freeform - Monotonic Spline'),
    ('names', 'External interface'),
    ('parameter', 'Optimization parameter definition'),
    ('partemp', 'Parallel tempering optimizer'),
    ('pdfwrapper', 'Model a probability density function'),
    ('plotutil', 'Plotting utilities'),
    ('plugin', 'Domain branding'),
    ('pmath', 'Parametric versions of standard functions'),
    #('pytwalk', 'MCMC error analysis using T-Walk steps'),
    ('quasinewton', 'BFGS quasi-newton optimizer'),
    ('random_lines', 'Random lines and particle swarm optimizers'),
    ('rebin','1D and 2D rebinning'),
    ('simplex','Nelder-Mead simplex optimizer (amoeba)'),
    ('util','Miscellaneous functions'),
    ('wsolve','Weighted linear and polynomial solver with uncertainty'),
]
package='bumps'
genfiles(package, modules, absolute=False)
